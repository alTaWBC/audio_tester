{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","soundBytes","sounds","index","preparingMicrophone","a","navigator","mediaDevices","getUserMedia","audio","stream","recorder","MediaRecorder","addEventListener","onDataAvailable","onStop","data","blob","Blob","url","URL","createObjectURL","sound","Audio","setState","selectAudio","createAudios","audios","map","_","onClick","playAudio","play","recordAudio","stop","start","this","disabled","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAmFeA,E,4MA9EXC,MAAQ,CACJC,WAAY,GACZC,OAAQ,GACRC,MAAO,M,EAOXC,oB,sBAAsB,4BAAAC,EAAA,sEACGC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IADhD,OACZC,EADY,OAElB,EAAKC,SAAW,IAAIC,cAAcF,GAClC,EAAKC,SAASE,iBAAiB,gBAAiB,EAAKC,iBACrD,EAAKH,SAASE,iBAAiB,OAAQ,EAAKE,QAJ1B,2C,EAOtBA,OAAS,YAAe,IAAZC,EAAW,EAAXA,KACJf,EAAU,sBAAO,EAAKD,MAAMC,YAAlB,CAA8Be,IACtCC,EAAO,IAAIC,KAAKjB,GAChBkB,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAQ,IAAIC,MAAMJ,GAClBjB,EAAM,sBAAO,EAAKF,MAAME,QAAlB,CAA0BoB,IACtCrB,EAAa,GACb,EAAKuB,SAAS,CAAEtB,SAAQD,gB,EAG5Ba,gBAAkB,YAAe,IAAZE,EAAW,EAAXA,KACXf,EAAU,sBAAO,EAAKD,MAAMC,YAAlB,CAA8Be,IAC9C,EAAKQ,SAAS,CAAEvB,gB,EAGpBwB,YAAc,SAACtB,GAAD,OAAW,EAAKqB,SAAS,CAAErB,W,EAEzCuB,aAAe,SAACC,GACZ,OAAOA,EAAOC,KAAI,SAACC,EAAG1B,GAClB,OACI,8BACI,wBAAQ2B,QAAS,kBAAM,EAAKL,YAAYtB,IAAxC,SAAiDA,KAD3CA,O,EAOtB4B,UAAY,WACwC,OAArB,EAAK/B,MAAMG,OAGtC,EAAKH,MAAME,OAAO,EAAKF,MAAMG,OAAO6B,Q,EAGxCC,YAAc,WAC2C,OAAlB,EAAKtB,WAGc,cAAxB,EAAKA,SAASX,MAExC,EAAKW,SAASuB,OAEd,EAAKvB,SAASwB,U,uDArDtB,WACIC,KAAKhC,wB,oBAwDT,WAAU,IAAD,EACCuB,EAASS,KAAKV,aAAaU,KAAKpC,MAAME,QAC5C,OACI,gCACI,wBAAQ4B,QAASM,KAAKH,YAAtB,SAA6D,eAAzB,UAAAG,KAAKzB,gBAAL,eAAeX,OAAwB,OAAS,UACnF2B,EACAS,KAAKpC,MAAMG,MACZ,wBAAQ2B,QAASM,KAAKL,UAAWM,SAA+B,OAArBD,KAAKpC,MAAMG,MAAtD,SAC0B,OAArBiC,KAAKpC,MAAMG,MAAX,eAAoCiC,KAAKpC,MAAMG,OAAU,wB,GAxE5DmC,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.370b7aa0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport styles from \"./App.module.css\";\n\nclass App extends Component {\n    state = {\n        soundBytes: [],\n        sounds: [],\n        index: null,\n    };\n\n    componentDidMount() {\n        this.preparingMicrophone();\n    }\n\n    preparingMicrophone = async () => {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        this.recorder = new MediaRecorder(stream);\n        this.recorder.addEventListener(\"dataavailable\", this.onDataAvailable);\n        this.recorder.addEventListener(\"stop\", this.onStop);\n    };\n\n    onStop = ({ data }) => {\n        let soundBytes = [...this.state.soundBytes, data];\n        const blob = new Blob(soundBytes);\n        const url = URL.createObjectURL(blob);\n        const sound = new Audio(url);\n        const sounds = [...this.state.sounds, sound];\n        soundBytes = [];\n        this.setState({ sounds, soundBytes });\n    };\n\n    onDataAvailable = ({ data }) => {\n        const soundBytes = [...this.state.soundBytes, data];\n        this.setState({ soundBytes });\n    };\n\n    selectAudio = (index) => this.setState({ index });\n\n    createAudios = (audios) => {\n        return audios.map((_, index) => {\n            return (\n                <div key={index}>\n                    <button onClick={() => this.selectAudio(index)}>{index}</button>\n                </div>\n            );\n        });\n    };\n\n    playAudio = () => {\n        const noAudioWasSelected = this.state.index === null;\n        if (noAudioWasSelected) return;\n\n        this.state.sounds[this.state.index].play();\n    };\n\n    recordAudio = () => {\n        const MicrophoneIsNotInitialized = this.recorder === null;\n        if (MicrophoneIsNotInitialized) return;\n\n        const MicrophoneIsRecording = this.recorder.state === \"recording\";\n        if (MicrophoneIsRecording) {\n            this.recorder.stop();\n        } else {\n            this.recorder.start();\n        }\n    };\n\n    render() {\n        const audios = this.createAudios(this.state.sounds);\n        return (\n            <div>\n                <button onClick={this.recordAudio}>{this.recorder?.state === \"recording\" ? \"Stop\" : \"Start\"}</button>\n                {audios}\n                {this.state.index}\n                <button onClick={this.playAudio} disabled={this.state.index === null}>\n                    {this.state.index !== null ? `Play ${this.state.index}` : \"Select Sound\"}\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}