{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","soundBytes","sounds","index","stream","microphone","preparingMicrophone","recorder","MediaRecorder","addEventListener","onDataAvailable","onStop","setState","data","blob","Blob","url","URL","createObjectURL","sound","Audio","alert","size","selectAudio","createAudios","audios","map","_","onClick","playAudio","play","recordAudio","stop","start","navigator","mediaDevices","getUserMedia","audio","then","this","console","log","disabled","e","message","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAoGeA,E,4MA/FXC,MAAQ,CACJC,WAAY,GACZC,OAAQ,GACRC,MAAO,KACPC,OAAQ,KACRC,YAAY,G,EAWhBC,oBAAsB,WACb,EAAKN,MAAMI,SAChB,EAAKG,SAAW,IAAIC,cAAc,EAAKR,MAAMI,QAC7C,EAAKG,SAASE,iBAAiB,gBAAiB,EAAKC,iBACrD,EAAKH,SAASE,iBAAiB,OAAQ,EAAKE,QAC5C,EAAKC,SAAS,CAAEP,YAAY,M,EAGhCM,OAAS,YAAe,IAAZE,EAAW,EAAXA,KACJZ,EAAU,sBAAO,EAAKD,MAAMC,YAAlB,CAA8BY,IACtCC,EAAO,IAAIC,KAAKd,GAChBe,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAQ,IAAIC,MAAMJ,GAClBd,EAAM,sBAAO,EAAKF,MAAME,QAAlB,CAA0BiB,IACtClB,EAAa,GACboB,MAAMR,EAAKS,MACX,EAAKV,SAAS,CAAEV,SAAQD,gB,EAG5BS,gBAAkB,YAAe,IAAZG,EAAW,EAAXA,KACXZ,EAAU,sBAAO,EAAKD,MAAMC,YAAlB,CAA8BY,IAC9CQ,MAAMR,EAAKS,MACX,EAAKV,SAAS,CAAEX,gB,EAGpBsB,YAAc,SAACpB,GAAD,OAAW,EAAKS,SAAS,CAAET,W,EAEzCqB,aAAe,SAACC,GACZ,OAAOA,EAAOC,KAAI,SAACC,EAAGxB,GAClB,OACI,8BACI,wBAAQyB,QAAS,kBAAM,EAAKL,YAAYpB,IAAxC,SAAiDA,KAD3CA,O,EAOtB0B,UAAY,WACwC,OAArB,EAAK7B,MAAMG,OAGtC,EAAKH,MAAME,OAAO,EAAKF,MAAMG,OAAO2B,Q,EAGxCC,YAAc,WAC2C,OAAlB,EAAKxB,WAGc,cAAxB,EAAKA,SAASP,MAExC,EAAKO,SAASyB,OAEd,EAAKzB,SAAS0B,U,uDA5DtB,WAAqB,IAAD,OAChBC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAAQC,MAAK,SAAClC,GACvD,EAAKQ,SAAS,CAAER,cAGpBmC,KAAKjC,wB,oBA2DT,WACI,IAAK,IAAD,EACAkC,QAAQC,IAAIF,KAAKvC,MAAMI,SAAWmC,KAAKvC,MAAMK,YACzCkC,KAAKvC,MAAMI,SAAWmC,KAAKvC,MAAMK,YAAYkC,KAAKjC,sBACtD,IAAMmB,EAASc,KAAKf,aAAae,KAAKvC,MAAME,QAC5C,OACI,gCACI,wBAAQ0B,QAASW,KAAKR,YAAtB,SAC8B,eAAzB,UAAAQ,KAAKhC,gBAAL,eAAeP,OAAwB,OAAS,UAEpDyB,EACAc,KAAKvC,MAAMG,MACZ,wBAAQyB,QAASW,KAAKV,UAAWa,SAA+B,OAArBH,KAAKvC,MAAMG,MAAtD,SAC0B,OAArBoC,KAAKvC,MAAMG,MAAX,eAAoCoC,KAAKvC,MAAMG,OAAU,oBAIxE,MAAOwC,GACL,OAAO,8BAAMA,EAAEC,e,GA3FTC,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0a5bd3ea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport styles from \"./App.module.css\";\n\nclass App extends Component {\n    state = {\n        soundBytes: [],\n        sounds: [],\n        index: null,\n        stream: null,\n        microphone: false,\n    };\n\n    componentDidMount() {\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n            this.setState({ stream });\n        });\n\n        this.preparingMicrophone();\n    }\n\n    preparingMicrophone = () => {\n        if (!this.state.stream) return;\n        this.recorder = new MediaRecorder(this.state.stream);\n        this.recorder.addEventListener(\"dataavailable\", this.onDataAvailable);\n        this.recorder.addEventListener(\"stop\", this.onStop);\n        this.setState({ microphone: true });\n    };\n\n    onStop = ({ data }) => {\n        let soundBytes = [...this.state.soundBytes, data];\n        const blob = new Blob(soundBytes);\n        const url = URL.createObjectURL(blob);\n        const sound = new Audio(url);\n        const sounds = [...this.state.sounds, sound];\n        soundBytes = [];\n        alert(data.size);\n        this.setState({ sounds, soundBytes });\n    };\n\n    onDataAvailable = ({ data }) => {\n        const soundBytes = [...this.state.soundBytes, data];\n        alert(data.size);\n        this.setState({ soundBytes });\n    };\n\n    selectAudio = (index) => this.setState({ index });\n\n    createAudios = (audios) => {\n        return audios.map((_, index) => {\n            return (\n                <div key={index}>\n                    <button onClick={() => this.selectAudio(index)}>{index}</button>\n                </div>\n            );\n        });\n    };\n\n    playAudio = () => {\n        const noAudioWasSelected = this.state.index === null;\n        if (noAudioWasSelected) return;\n\n        this.state.sounds[this.state.index].play();\n    };\n\n    recordAudio = () => {\n        const MicrophoneIsNotInitialized = this.recorder === null;\n        if (MicrophoneIsNotInitialized) return;\n\n        const MicrophoneIsRecording = this.recorder.state === \"recording\";\n        if (MicrophoneIsRecording) {\n            this.recorder.stop();\n        } else {\n            this.recorder.start();\n        }\n    };\n\n    render() {\n        try {\n            console.log(this.state.stream && !this.state.microphone);\n            if (this.state.stream && !this.state.microphone) this.preparingMicrophone();\n            const audios = this.createAudios(this.state.sounds);\n            return (\n                <div>\n                    <button onClick={this.recordAudio}>\n                        {this.recorder?.state === \"recording\" ? \"Stop\" : \"Start\"}\n                    </button>\n                    {audios}\n                    {this.state.index}\n                    <button onClick={this.playAudio} disabled={this.state.index === null}>\n                        {this.state.index !== null ? `Play ${this.state.index}` : \"Select Sound\"}\n                    </button>\n                </div>\n            );\n        } catch (e) {\n            return <div>{e.message}</div>;\n        }\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}