{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","soundBytes","sounds","index","stream","microphone","preparingMicrophone","recorder","MediaRecorder","addEventListener","onDataAvailable","onStop","setState","data","blob","Blob","type","url","URL","createObjectURL","sound","Audio","selectAudio","createAudios","audios","map","_","onClick","playAudio","play","recordAudio","stop","start","navigator","mediaDevices","getUserMedia","audio","then","this","console","log","disabled","e","message","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAkGeA,E,4MA7FXC,MAAQ,CACJC,WAAY,GACZC,OAAQ,GACRC,MAAO,KACPC,OAAQ,KACRC,YAAY,G,EAWhBC,oBAAsB,WACb,EAAKN,MAAMI,SAChB,EAAKG,SAAW,IAAIC,cAAc,EAAKR,MAAMI,QAC7C,EAAKG,SAASE,iBAAiB,gBAAiB,EAAKC,iBACrD,EAAKH,SAASE,iBAAiB,OAAQ,EAAKE,QAC5C,EAAKC,SAAS,CAAEP,YAAY,M,EAGhCM,OAAS,YAAe,IAAZE,EAAW,EAAXA,KACJZ,EAAU,sBAAO,EAAKD,MAAMC,YAAlB,CAA8BY,IACtCC,EAAO,IAAIC,KAAKd,EAAY,CAAEe,KAAM,cACpCC,EAAMC,IAAIC,gBAAgBL,GAC1BM,EAAQ,IAAIC,MAAMJ,GAClBf,EAAM,sBAAO,EAAKF,MAAME,QAAlB,CAA0BkB,IACtCnB,EAAa,GACb,EAAKW,SAAS,CAAEV,SAAQD,gB,EAG5BS,gBAAkB,YAAe,IAAZG,EAAW,EAAXA,KACXZ,EAAU,sBAAO,EAAKD,MAAMC,YAAlB,CAA8BY,IAC9C,EAAKD,SAAS,CAAEX,gB,EAGpBqB,YAAc,SAACnB,GAAD,OAAW,EAAKS,SAAS,CAAET,W,EAEzCoB,aAAe,SAACC,GACZ,OAAOA,EAAOC,KAAI,SAACC,EAAGvB,GAClB,OACI,8BACI,wBAAQwB,QAAS,kBAAM,EAAKL,YAAYnB,IAAxC,SAAiDA,KAD3CA,O,EAOtByB,UAAY,WACwC,OAArB,EAAK5B,MAAMG,OAGtC,EAAKH,MAAME,OAAO,EAAKF,MAAMG,OAAO0B,Q,EAGxCC,YAAc,WAC2C,OAAlB,EAAKvB,WAGc,cAAxB,EAAKA,SAASP,MAExC,EAAKO,SAASwB,OAEd,EAAKxB,SAASyB,U,uDA1DtB,WAAqB,IAAD,OAChBC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAAQC,MAAK,SAACjC,GACvD,EAAKQ,SAAS,CAAER,cAGpBkC,KAAKhC,wB,oBAyDT,WACI,IAAK,IAAD,EACAiC,QAAQC,IAAIF,KAAKtC,MAAMI,SAAWkC,KAAKtC,MAAMK,YACzCiC,KAAKtC,MAAMI,SAAWkC,KAAKtC,MAAMK,YAAYiC,KAAKhC,sBACtD,IAAMkB,EAASc,KAAKf,aAAae,KAAKtC,MAAME,QAC5C,OACI,gCACI,wBAAQyB,QAASW,KAAKR,YAAtB,SAC8B,eAAzB,UAAAQ,KAAK/B,gBAAL,eAAeP,OAAwB,OAAS,UAEpDwB,EACAc,KAAKtC,MAAMG,MACZ,wBAAQwB,QAASW,KAAKV,UAAWa,SAA+B,OAArBH,KAAKtC,MAAMG,MAAtD,SAC0B,OAArBmC,KAAKtC,MAAMG,MAAX,eAAoCmC,KAAKtC,MAAMG,OAAU,oBAIxE,MAAOuC,GACL,OAAO,8BAAMA,EAAEC,e,GAzFTC,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.776d257f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport styles from \"./App.module.css\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        soundBytes: [],\r\n        sounds: [],\r\n        index: null,\r\n        stream: null,\r\n        microphone: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\r\n            this.setState({ stream });\r\n        });\r\n\r\n        this.preparingMicrophone();\r\n    }\r\n\r\n    preparingMicrophone = () => {\r\n        if (!this.state.stream) return;\r\n        this.recorder = new MediaRecorder(this.state.stream);\r\n        this.recorder.addEventListener(\"dataavailable\", this.onDataAvailable);\r\n        this.recorder.addEventListener(\"stop\", this.onStop);\r\n        this.setState({ microphone: true });\r\n    };\r\n\r\n    onStop = ({ data }) => {\r\n        let soundBytes = [...this.state.soundBytes, data];\r\n        const blob = new Blob(soundBytes, { type: \"audio/mp4\" });\r\n        const url = URL.createObjectURL(blob);\r\n        const sound = new Audio(url);\r\n        const sounds = [...this.state.sounds, sound];\r\n        soundBytes = [];\r\n        this.setState({ sounds, soundBytes });\r\n    };\r\n\r\n    onDataAvailable = ({ data }) => {\r\n        const soundBytes = [...this.state.soundBytes, data];\r\n        this.setState({ soundBytes });\r\n    };\r\n\r\n    selectAudio = (index) => this.setState({ index });\r\n\r\n    createAudios = (audios) => {\r\n        return audios.map((_, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    <button onClick={() => this.selectAudio(index)}>{index}</button>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n    playAudio = () => {\r\n        const noAudioWasSelected = this.state.index === null;\r\n        if (noAudioWasSelected) return;\r\n\r\n        this.state.sounds[this.state.index].play();\r\n    };\r\n\r\n    recordAudio = () => {\r\n        const MicrophoneIsNotInitialized = this.recorder === null;\r\n        if (MicrophoneIsNotInitialized) return;\r\n\r\n        const MicrophoneIsRecording = this.recorder.state === \"recording\";\r\n        if (MicrophoneIsRecording) {\r\n            this.recorder.stop();\r\n        } else {\r\n            this.recorder.start();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        try {\r\n            console.log(this.state.stream && !this.state.microphone);\r\n            if (this.state.stream && !this.state.microphone) this.preparingMicrophone();\r\n            const audios = this.createAudios(this.state.sounds);\r\n            return (\r\n                <div>\r\n                    <button onClick={this.recordAudio}>\r\n                        {this.recorder?.state === \"recording\" ? \"Stop\" : \"Start\"}\r\n                    </button>\r\n                    {audios}\r\n                    {this.state.index}\r\n                    <button onClick={this.playAudio} disabled={this.state.index === null}>\r\n                        {this.state.index !== null ? `Play ${this.state.index}` : \"Select Sound\"}\r\n                    </button>\r\n                </div>\r\n            );\r\n        } catch (e) {\r\n            return <div>{e.message}</div>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}